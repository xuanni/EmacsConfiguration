#+TITLE: Emacs Configurations
#+AUTHOR: Sean Ni
#+DATE: <2018-02-15 Thu>

* Emacs built-in

** Font

   #+BEGIN_SRC emacs-lisp :tangle yes
     (cond ((eq system-type 'windows-nt)
            ;; (set-face-attribute 'default nil :font "Courier New" :height 141))
            (set-face-attribute 'default nil :font "Consolas" :height 141))
           ((eq system-type 'darwin)
            (set-face-attribute 'default nil :font "Monaco" :height 141))
           (t (set-face-attribute 'default nil :height 141)) ; t for default case
           ;; looks like gnu/linux is not working in system-type
           )
   #+END_SRC

** Appearance and behavior
   #+BEGIN_SRC emacs-lisp :tangle yes
     (prefer-coding-system 'utf-8-unix)
     (blink-cursor-mode -1)
     (column-number-mode 1)                  ; display column number in modeline
     (display-time-mode 1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (show-paren-mode 1)                     ; highlight matching parenthese
     (tool-bar-mode -1)
     (which-function-mode 1)                 ; display function name in modeline
     (fset 'yes-or-no-p 'y-or-n-p)           ; simplify this
     (setq-default indent-tabs-mode nil)     ; use space instead of tabs (setq: buffer local var, setq-default global)
     (setq initial-scratch-message ";; Put your mess here\n\n")
     (setq inhibit-startup-message nil)
     (setq inhibit-startup-screen t)
     (setq large-file-warning-threshold 100000000)
     (setq scroll-step 1)                    ; don't suddenly roll up a lot of lines
     (setq tab-width 4)
     (setq visible-bell t)                   ; flash screen instead of audible ding
     (if (eq system-type 'darwin)
         (progn
           (setq ns-command-modifier (quote control))
           (setq ns-right-command-modifier (quote meta))))
     (put 'narrow-to-region 'disabled nil)
     (global-auto-revert-mode 1)             ;could be more traffic/network
   #+END_SRC

** org-mode

*** install latest org mode
    stock emacs comes with very old version of org-mode, to upgrade org-mode, first =emacs -q=, then =eval-region= below code, then package list, find org (and possibly org-plus-contrib) and install it. sometimes direct =package-install= command won't work so you have resort to the =package-list= method.
    #+BEGIN_SRC emacs-lisp :tangle no
      (require 'package)
      (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
    #+END_SRC
*** use line wrap and speed commands
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq org-startup-truncated nil)        ; tell org mode to wrap line instead of shift
     (setq org-use-speed-commands t)         ; use single key to navigate
   #+END_SRC

*** global keys to activate org capture and agenda
   #+BEGIN_SRC emacs-lisp :tangle yes
     (global-set-key (kbd "C-c l") 'org-store-link)
     (global-set-key (kbd "C-c a") 'org-agenda)
     (global-set-key (kbd "C-c c") 'org-capture)
     (global-set-key (kbd "C-c b") 'org-switchb)
   #+END_SRC

*** org capture and agenda settings
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq org-agenda-files (list "~/Documents/agenda.org"
                                  "~/Documents/notes.org"))
     (setq org-capture-templates
           (quote (
                   ("t" "To Do Item" entry (file+headline "~/Documents/agenda.org" "To Do Tasks")
                    "** TODO %^{Title} %^G\n\tINCEPTION: %T\n\t%a\n\t%?")
                   ("b" "Bug Item" entry (file+headline "~/Documents/agenda.org" "Bugs")
                    "** BUG %^{Title} %^G\n\tINCEPTION: %T\n\t%a\n\t%?")
                   ("n" "Notes")
                   ("nc" "Computer Notes" entry (file+headline "~/Documents/notes.org" "Computer")
                    "** %^{Title} %^G\n\t%U\n\t%a\n\t%x\n\t%c\n\t%?")
                   ("nf" "Finance Notes" entry (file+headline "~/Documents/notes.org" "Finance")
                    "** %^{Title} %^G\n\t%U\n\t%a\n\t%x\n\t%c\n\t%?")
                   ("nw" "Work Notes" entry (file+headline "~/Documents/notes.org" "Work")
                    "** %^{Title} %^G\n\t%U\n\t%a\n\t%x\n\t%c\n\t%?")
                   )))
   #+END_SRC

*** calendar and diary
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq org-agenda-include-diary t)
    #+END_SRC

*** closing todo items
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq org-log-done 'time)
    #+END_SRC

*** customize todo keywords
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq org-todo-keywords '(
                                (sequence "TODO" "WAIT" "|" "DONE") ; for normal stuff
                                (sequence "BUG" "VERIFY" "|" "FIXED") ; for bug
                                ))
    #+END_SRC
** Backup files
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; Remove all backup files
     ;; (setq make-backup-files nil)
     ;; (setq backup-inhibited t)
     ;; (setq auto-save-default nil)
     ;; or alternatively
     (setq backup-directory-alist '(("." . "~/.saves")))
   #+END_SRC

** Language Settings

*** C

    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq-default c-default-style "linux")
      (setq-default c-basic-offset 4)
      (c-set-offset 'case-label '+)           ; fix case index
    #+END_SRC

*** python
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq python-indent-offset 4)
    #+END_SRC

*** Scons
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'auto-mode-alist '("\\.scons\\'" . python-mode))
      (add-to-list 'auto-mode-alist '("\\.api\\'" . python-mode))
    #+END_SRC
** dired copy
   With this option on, Emacs automatically copies marked files to another opened dired in another window
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq dired-dwim-target t)
   #+END_SRC

** XML completion
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq nxml-slash-auto-complete-flag t)
   #+END_SRC

** whitespace cleanup
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'before-save-hook 'whitespace-cleanup)
     (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
   #+END_SRC

** recentf location
   use local disk instead of network drive
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; (setq recentf-save-file "/local/mnt/workspace/.recentf")
   #+END_SRC

   History of why I changed this and changed it back. First off, it should not be changed, otherwise it won't be portable. Reason why I changed this was I suspect the recent file was the reason why helm-mini was slow. But change this won't help. Indeed, the slowness of helm-mini was due to the recentf, because helm-buffer-list was instant but helm-mini was not, and the only difference between the two was recentf was present in helm-mini. So I found the command helm-recentf, and it is *VERY SLOW*. It appears that there are 2 files inside recentf that were from a network scratch disk, which was very slow to access. Problem solved by removing these 2 files from the recentf list. Now problem is why the helm-recentf needs to check the actual file itself instead of just load the list file?

** miscellaneous

   Emacs 25 add new variable package-selected-packages, every time you open packages, the customize.el will add this variable to your init.el or .emacs. To prevent it from doing this, add this, so custom.el will be used to hold that data, but never source control it.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   #+END_SRC

* Packages

** helm
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'helm)
     (require 'helm-config)

     ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
     ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
     ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
     (global-set-key (kbd "C-c h") 'helm-command-prefix)
     (global-unset-key (kbd "C-x c"))

     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x b") 'helm-mini)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     ;; (global-set-key (kbd "C-x k") 'kill-buffer)

     ;; make helm open at bottom with full frame width
     (add-to-list 'display-buffer-alist
                  `(,(rx bos "*helm" (* not-newline) "*" eos)
                    (display-buffer-in-side-window)
                    (inhibit-same-window . t)
                    (window-height . 0.4)))
     ;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
     ;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
     ;; (define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z

     (when (executable-find "curl")
       (setq helm-google-suggest-use-curl-p t)) ;not sure what this is for

     (setq
      ;; helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
           ;; helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
           helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
           helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
           ;; helm-ff-file-name-history-use-recentf t
           )

     (helm-mode 1)                           ; turn on helm mode for kill buffer etc

   #+END_SRC

** window-numbering
   #+BEGIN_SRC emacs-lisp :tangle yes
     (window-numbering-mode 1)
   #+END_SRC

** Version Control
*** magit

    #+BEGIN_SRC emacs-lisp :tangle yes
      (if (eq system-type 'windows-nt)
          (setq magit-git-executable "c:\\Program Files\\Git\\bin\\git.exe")
        )
      (global-set-key (kbd "C-x g") 'magit-status)
      (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
    #+END_SRC

*** p4
    #+BEGIN_SRC emacs-lisp :tangle yes
      (load-library "p4")
    #+END_SRC

** helm-gtags
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'helm-gtags)
     ;; (add-hook 'dired-mode-hook 'helm-gtags-mode)
     ;; (add-hook 'eshell-mode-hook 'helm-gtags-mode)
     (add-hook 'c-mode-hook 'helm-gtags-mode)
     (add-hook 'c++-mode-hook 'helm-gtags-mode)
     (add-hook 'java-mode-hook 'helm-gtags-mode)
     (add-hook 'asm-mode-hook 'helm-gtags-mode)
     (add-hook 'python-mode-hook 'helm-gtags-mode)

     (setq helm-gtags-auto-update t)
     (setq helm-gtags-suggested-key-mapping t)

     ;; key bindings
     (eval-after-load "helm-gtags"
       '(progn
          (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
          ;; (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
          ;; (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
          ;; (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
          ;; (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
          (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
          (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
          (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)))

     ;; key bindings (old)
     ;; (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
     ;; (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
     ;; (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
     ;; (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
     ;; (define-key helm-gtags-mode-map (kbd "C-x k") 'kill-buffer)
     (provide 'setup-helm-gtags)
   #+END_SRC

** helm-projectile
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq projectile-enable-caching t)
     (setq projectile-globally-ignored-directories
      (quote
       (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "Debug*")))
     (setq projectile-globally-ignored-file-suffixes
      (quote
       ("o" "so" "lib" "a" "pyc" "elf" "lst" "suo" "sdf" "vtg" "mdt" "bin")))
     (setq projectile-globally-ignored-files (quote ("TAGS" "GTAGS" "GPATH" "GRTAGS")))
     (projectile-global-mode t)
     (setq projectile-completion-system 'helm)
     (helm-projectile-on)
   #+END_SRC
** grep-a-lot
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'grep-a-lot)
     (grep-a-lot-setup-keys)
   #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC

** yasnippet

   only enable yas-minor-mode for certain major modes

   #+begin_src emacs-lisp :tangle yes
     (require 'yasnippet)
     (yas-reload-all)
     (add-hook 'org-mode-hook #'yas-minor-mode)
     (add-hook 'c-mode-hook #'yas-minor-mode)
     (add-hook 'c++-mode-hook #'yas-minor-mode)
     (add-hook 'python-mode-hook #'yas-minor-mode)
     (add-hook 'sh-mode-hook #'yas-minor-mode)
     (add-hook 'nroff-mode-hook #'yas-minor-mode)
     (add-hook 'LaTeX-mode-hook #'yas-minor-mode)
   #+end_src

** notmuch-emacs

   frontend for notmuch

   #+BEGIN_SRC emacs-lisp :tangle no
     (autoload 'notmuch "notmuch" "notmuch mail" t)
     ;; (require 'notmuch)  ;; always load when start emacs
     (setq notmuch-search-oldest-first nil)
     (setq mail-specify-envelope-from t)
     (setq mail-specify-envelope-from (quote header))
     (setq message-sendmail-envelope-from (quote header))
     (setq send-mail-function (quote sendmail-send-it))
     (setq message-cite-function (quote message-cite-original))
     (setq message-cite-style (quote message-cite-style-outlook))
     (setq message-yank-cited-prefix "")
     (setq message-yank-empty-prefix "")
     (setq message-yank-prefix "")
     (setq notmuch-show-all-tags-list t)     ; show all tags in hello screen
     (require 'org-notmuch)                  ; store links in notmuch buffers
   #+END_SRC

** company mode
   global mode will slow down eshell even hang it.
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; (add-hook 'after-init-hook 'global-company-mode)
     (add-hook 'c-mode-hook 'company-mode)
     (add-hook 'c++-mode-hook 'company-mode)
     (add-hook 'text-mode-hook 'company-mode)
     (add-hook 'sh-mode-hook 'company-mode)
     (add-hook 'python-mode-hook 'company-mode)
     (add-hook 'emacs-lisp-mode-hook 'company-mode)
     (add-hook 'org-mode-hook 'company-mode)
     (add-hook 'lisp-mode-hook 'company-mode)
   #+END_SRC

** company-irony
   use this as backend instead of company-clang for C/C++/Objective-C
   #+BEGIN_SRC emacs-lisp :tangle no
     (eval-after-load 'company
       '(add-to-list 'company-backends 'company-irony))
   #+END_SRC

** company-emacs-eclim
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'company-emacs-eclim)
     (company-emacs-eclim-setup)
   #+END_SRC

** diminish
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'diminish)
     (diminish 'helm-mode)
     (diminish 'abbrev-mode)
     (diminish 'projectile-mode)
     (diminish 'company-mode "")
     (diminish 'yas-minor-mode)
     (diminish 'helm-gtags-mode)
     (diminish 'org-src-mode)
   #+END_SRC

** bm
   visual bookmarks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'bm)
     (global-set-key (kbd "<C-f2>") 'bm-toggle)
     (global-set-key (kbd "<f2>")   'bm-next)
     (global-set-key (kbd "<S-f2>") 'bm-show-all)
     ;; (global-set-key (kbd "<S-f2>") 'bm-previous)
     ;; Click on fringe to toggle bookmarks, and use mouse wheel to move between them.
     (global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
     (global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
     (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
     ;; If you would like to cycle through bookmarks in all open buffers, add the following line:
     (setq bm-cycle-all-buffers t)
   #+END_SRC
* Self-defined Commands

** insert-date
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun insert-date (prefix)
       "Insert the current date. With prefix-argument, use ISO format. With
        two prefix arguments, write out the day and month name."
       (interactive "P")
       (let ((format (cond
                      ;; ((not prefix) "%d.%m.%Y")
                      ;; ((equal prefix '(4)) "%Y-%m-%d")
                      ((not prefix) "%b. %d, %Y")))
             (system-time-locale "en_US"))
         (insert (format-time-string format))))
   #+END_SRC

* bug fix for linux font size
  #+BEGIN_SRC emacs-lisp :tangle yes
    (define-key special-event-map [config-changed-event] #'ignore)
  #+END_SRC
